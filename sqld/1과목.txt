1. 모델링
  1) 개념
    - 현실 세계의 비즈니스 프로세스와 데이터 요구 사항을 추상적이고
      구조화된 형태로 표현하는 과정
    - 데이터베이스의 구조와 관계를 정의
    - 데이터의 저장, 조작, 관리 방법을 명확하게 정의

  2) 특징
    - 단순화
        - 현실을 단순화하여 핵심 요소에 집중하고 불필요한 세부 사항 제거
        - 단순화를 통해 복잡한 현실 세계를 이해하고 표현하기 쉬워짐
    - 추상화
        - 현실세계를 일정한 형식에 맞추어 간략하게 표현하는 과정
    - 명확화
        - 애매모호함을 제거하고 정확하게 현상을 기술
        - 모델을 이해하는 이들의 의사소통을 원활하게 함

  3) 유의점
    - 중복
        - 한 테이블 또는 여러 테이블에 같은 정보를 저장하지 않도록 설계
    - 비유연성
        - 사소한 업무 변화에 모델이 자주 변경되지 않도록 설계
        - 데이터 정의를 프로세스와 분리
    - 비일관성
        - 데이터베이스 내의 정보가 모순되거나 상반된 내용을 갖는 상태
        - 데이터 간 상호연관 관계를 명확히 정의
        - 데이터 품질 관리 필요
        - 데이터의 중복이 없더라도 비일관성은 발생할 수 있음

  4) 데이터 모델링 3가지 요소
    - 대상(Entity)       : 관리하고자 하는 대상(객체)
    - 속성(Attribute)    : 대상들이 갖는 속성
    - 관계(Relationship) : 대상들 간의 관계


2. 데이터 모델링 3단계
  1) 개념적 모델링
    - 업무 중심적이고 포괄적인 수준의 모델링
    - 추상화 수준이 가장 높음
    - 업무 분석 후 핵심 엔터티를 추출하는 단계
    - 엔터티 간의 관계를 표현하기 위해 ERD 작성

  2) 논리적 모델링
    - 개념적 모델링 결과를 토대로 세부속성, 식별자, 관계 등을 표현하는 단계
    - 데이터 구조를 정의하기 때문에 비슷한 업무나 프로젝트에서 
      동일한 형태의 데이터 사용 시 재사용 가능
    - 데이터 정규화 수행
    - 재사용성이 가장 높은 논리적 모델은 유지보수가 용이

  3) 물리적 모델링
    - 논리적 모델링 후 이를 직접 물리적으로 생성하는 과정
    - 데이터베이스 성능, 디스크 저장구조, 하드웨어의 보안성, 가용성 등을 고려
    - 가장 구체적인 수준의 데이터 모델링
    - 추상화 수준은 가장 낮음


3. 데이터 모델의 표기법(ERD : Entity Relationship Diagram)
  1) 개념
    - 엔터티와 엔터티 간의 관계를 시각적으로 표현한 다이어그램
    - 1976년 피터 첸이 만든 표기법, 데이터 모델링 표준으로 사용

  2) ERD 작성 절차(6단계)
    [1]. 엔터티를 도출한 후 그림
    [2]. 엔터티 배치
    [3]. 엔터티 간의 관계를 설정
    [4]. 관계명을 서술
    [5]. 관계의 참여도 기술
    [6]. 관계의 필수 여부 확인


4. 엔터티(Entity)
  1) 개념
    - 현실 세계에서 독립적으로 식별 가능한 객체나 사물을 나타냄
    - 엔터티는 업무 상 분석해야 하는 대상(Instance)들로 이루어진 집합
    - 인스턴스는 엔터티의 특정한 속성 값들로 구성되며
    - 엔터티의 개념을 현실에서 구체적으로 나타낸 것
    - ex)
        엔터티 : 학생
        속성   : 학번, 이름, 학과 등
        식별자 : 학번(고유한 학번을 각 학생을 식별)
        인스턴스 : 특정 학생의 데이터

  2) 특징
    - 유일한 식별자에 의해 식별 가능
        - 인스턴스가 식별자에 의해 한 개씩만 존재하는 지 검증 필요
        - 유일한 식별자는 그 엔터티의 인스턴스만의 고유 이름
        - ex) 이름은 같을 수 있으므로 학번이 고유 식별자

    - 해당 업무에 필요하고 관리하고자 하는 정보
        - 설계하는 업무의 시스템 구축에 필요한 정보여야 함

    - 2개 이상의 인스턴스들의 집합
        - 인스턴스가 한 개인 엔터티는 집합이 아니므로 성립이 안됨
        
    - 엔터티는 반드시 2개 이상의 속성을 가짐
        - 하나의 인스턴스는 각각의 속성에 대한 값을 1개만 가질 수 있음

    - 엔터티는 업무 프로세스에 의해 이용
        - 실제 사용되지 않으면 잘못 설계된 것
        - 모델링 시 발견하기 어려운 경우 데이터 모델 검증이나 상관 모델링 시 
          단위 프로세스 교차점검으로 문제 도출
        - 누락된 프로세스의 경우 추후 해당 프로세스 추가
        - 반대로 사용되지 않는 고립 엔터티는 제거 필요

    - 다른 엔터티와 최소 1개 이상의 관계 성립
        - 엔터티는 업무적 연관성을 갖고 다른 엔터티와 연관의 의미를 가짐
        - 관계가 없는 엔터티 도출은 부적절한 엔터티이거나 
          적절한 관계를 찾지 못한 것


  2) 분류
    - 유형과 무형에 따른 분류
        [1] 유형 엔터티
            - 물리적 형태가 있음(실체가 있음)
            - 안정적이며 지속적으로 활용되는 엔터티
            - 업무로부터 구분하기가 가장 용이한 엔터티
            - ex) 실체가 있는 것(컴퓨터) 등
        
        [2] 개념 엔터티
            - 물리적인 형태가 없음
            - 관리해야 할 개념적 정보로부터 구분되는 엔터티
            - ex) 실체가 없는 것, 보거나 만질 수 없는 것(보험) 등

        [3] 사건 엔터티
            - 업무를 수행함에 따라 발생하는 엔터티
            - 발생량이 많고 각종 통계자료에 이용
            - ex) 주문, 청구

    - 발생 시점에 따른 분류
        [1] 기본 엔터티
            - 업무에 원래 존재하는 정보
            - 다른 엔터티와 관계에 의해 생성되지 않고 독립적으로 생성
            - 타 엔터티의 부모 역할을 하는 엔터티
            - 주식별자를 상속받지 않고 자신의 고유한 주식별자를 가짐
            - ex) 사원, 학생, 부서

        [2] 중심 엔터티
            - 기본 엔터티로부터 발생되고 그 업무에서 중심적인 역할
            - 많은 데이터가 발생되고 다른 엔터티와의 관계를 통해 많은
              행위 엔터티를 생성
            - ex) 계약, 사고, 청구, 주문

        [3] 행위 엔터티
            - 2개 이상의 부모 엔터티로부터 발생
            - 자주 내용이 바뀌거나 데이터 양이 증가
            - 분석 초기 단계보다는 상세 설계 단계나 
              프로세스와 상관모델링을 진행하면서 도출
            - ex) 주문(고객과 상품 엔터티로부터 발생함)

  3) 명명 규칙
    - 현업에서 사용하는 용어 사용
    - 가능하면 약자 사용하지 않음
    - 단수 명사 사용
    - 모든 엔터티에서 유일하게 이름 부여
    - 엔터티 생성 의미대로 이름 부여

5. 속성(Attribute)
  1) 개념
    - 속성은 업무에서 필요로하는 고유한 성질을 의미, 컬럼
    - 업무상 인스턴스로 관리하고자 하는 더 이상 분리되지 않는 최소의 단위
  
  2) 엔터티, 인스턴스, 속성, 속성값의 관계
    - 엔터티는 2개 이상의 인스턴스의 집합
    - 엔터티는 2개 이상의 속성을 가짐
    - 속성은 1개의 속성값을 가짐
    - 속성은 엔터티에 대한 자세하고 구체적인 정보를 나타냄, 구체적인 값을 가짐

  
  3) 특징
    - 반드시 해당 업무에 필요함
    - 정해진 주식별자에 함수적 종속성을 가져야 함
    - 하나의 속성은 한 개의 값을 가짐(원자성)
    - 다중 값일 경우 별도의 엔터티를 이용하여 분리

    - 원자성 : 인스턴스가 해당 속성에 대해 명확한 값을 가지는 것
    - 함수적 종속성 
        - 한 속성이 다른 속성 값에 종속적인 관계를 갖는 특징
        - A의 값에 의해 B가 유일하게 결정
          ->  B는 A에 함수적으로 종속
          ->  A -> B

  4) 분류
    - 속성의 특성에 따른 분류
        [1] 기본 속성
          - 업무로부터 추출된 모든 속성
        
        [2] 설계 속성
          - 기본 속성 외에 업무를 규칙화하기 위해 새로 만들어지거나
            기본 속성을 변형하여 만들어지는 속성
          - ex) 상품 코드, 지점 코드

        [3] 파생 속성
          - 다른 속성에 의해 만들어지는 속성
          - 일반적으로 계산된 값
          - 데이터 정합성을 유지하기 위해 가급적 적게 정의
          - ex) 합계, 평균, 이자

    - 엔터티 구성방식에 따른 분류
        [1] PK(Primary Key, 기본키)
          - 인스턴스를 식별할 수 있는 속성
        
        [2] FK(Foreign Key, 외래키)
          - 다른 엔터티와의 관계에서 포함된 속성

        [3] 일반 속성
          - 그 외의 속성

    - 분해 여부에 따른 분류
        [1] 단일 속성
          - 하나의 의미로 구성된 경우

        [2] 복합 속성
          - 여러개의 의미로 구성된 경우
          - ex) 시군구 분해 가능

        [3] 다중값 속성
          - 속성이 여러 값을 가짐
          - 엔터티로 분해

  5) 명명 규칙
    - 해당 업무에서 사용하는 이름 부여
    - 서술식 속성명 사용하지 않음
    - 약어 사용 지양
    - 전체 데이터 모델에서 유일한 명칭

  6) 도메인
    - 속성이 가질 수 있는 값의 범위
    - 데이터 타입과 크기, 제약사항


6. 관계(Relationship)
  1) 개념
    - 엔터티 간의 연관성
    - 논리적인 연관성을 파악하여 정의

  2) 종류
    - 존재적 관계
        - 한 엔터티의 존재가 다른 엔터티의 존재에 영향을 미치는 관계
        - 엔터티 간의 연관된 상태
        - ex) 부서가 삭제되면 사원에 영향을 미침

    - 행위적 관계
        - 엔터티 간의 어떤 행위가 있는 것을 의미
        - ex) 고객 엔터티의 행동에 의해 주문 엔터티 발생
        
    - ERD에서는 존재관계와 행위관계를 구분하지 않음

  3) 구성
    - 관계명
    - 차수(Cardinality)
    - 선택성(Optionality)

  4) 차수
    - 한 엔터티의 인스턴스가 다른 엔터티의 인스턴스와 어떻게 연결되는지 표현
    - 1:1, 1:N, N:M
    - 종류
      [1] 1 대 1 관계
          - 완전 1대1 관계
              - 하나의 엔터티에 관계되는 엔터티가 반드시 하나 존재

          - 선택적 1대1 관계
              - 하나의 엔터티에 관계되는 엔터티가 하나이거나 없을 수 있는 경우
    
      [2] 1 대 N 관계
          - 엔터티에 하나의 행에 다른 엔터티의 값이 여러 개 있는 관계
          - ex) 고객은 여러 개의 계좌를 소유할 수 있음

      [3] M 대 N 간계
          - 두 엔터티가 다대다의 연결 관계를 가지고 있음
          - 조인 시 카테시안 곱이 발생하므로 연결 엔터티를 추가해 
            1대N 관계를 만들 필요가 있음
        
  5) 관계의 페어링
    - 엔터티 안에 인스턴스가 개별적으로 관계를 가지는 것
    - 관계란 페어링의 집합을 의미함
  
  6) 관계, 차수, 페어링 차이
    - 학생과 강의는 관계를 가짐
    - 한 학생은 여러 강의를 수강 가능, 한 강의는 여러 학생에 의해 수강 가능
      차수는 M:N 관계가 됨
    - '학생 A 가 강의 B를 2023년 학기에 수강했고 성적은 A+를 받았다.'
      같은 특정한 페어링 형성, 인스턴스끼리 연결되는 과정


7. 주식별자
  1) 개념
    - 엔터티를 대표할 수 있는 속성
    - 하나의 유일한 식별자가 존재해야 함
    - 식별자는 논리 모델링에서 사용함, 물리 모델링에서는 키
  
  2) 특징
    - 유일성 : 주식별자로 인스턴스를 유일하게 구분함
    - 최소성 : 유일성을 만족하는 최소한의 속성으로 구성
    - 불변성 : 값이 변하지 않아야 함
    - 존재성 : 반드시 값이 존재해야 함, Null 안됨

  3) 분류
    - 대표성 여부에 따른 식별자의 종류
      [1] 주식별자
          - 유일성과 최소성을 만족하며 엔터티를 대표하는 식별자
          - 타 엔터티와 참조관계를 연결할 수 있는 식별자

      [2] 보조식별자
          - 인스턴스를 구분할 수 있는 구분자이지만, 대표성이 없음
          - 유일성과 최소성 만족

    - 생성 여부에 따른 식별자의 종류
      [1] 내부식별자
          - 다른 엔터티 참조 없이 내부에서 스스로 생성되는 식별자

      [2] 외부식별자
          - 다른 엔터티와의 관계로 인해 만들어진 식별자(외래키)

    - 속성 수에 따른 식별자 종류
      [1] 단일식별자
          - 하나의 속성으로 구성

      [2] 복합식별자
          - 2개 이상의 속성으로 구성

    - 대체 여부에 따른 식별자의 종류
      [1] 본질식별자
          - 비즈니스 프로세스에서 만들어진 식별자

      [2] 인조식별자
          - 인위적으로 만들어지는 식별자
          - ex) 상품 코드

  4) 표기법
    - 바커 표기법에서는 # 으로 표현

  5) 도출 기준
    - 해당 업무에서 자주 이용되는 속성을 주식별자로 지정
        - 더 많이 사용되는 속성을 주식별자로 사용
    
    - 명칭이나 내역 등과 같은 이름은 피함
        - 이름 자체를 주식별자로 사용하는 것을 피함
        - ex) 부서명 보다는 부서코드를 만들어 주식별자로 사용

    - 속성의 수를 최대한 적게 구성
        - 주식별자를 너무 많은 속성으로 구성 시, 조인 성능저하 발생 우려


  6) 관계 간 엔터티 구분
    - 강한 개체
        - 독립적으로 존재할 수 있는 엔터티
    
    - 약한 개체
        - 독립적으로 존재할 수 없는 엔터티

  7) 식별관계와 비식별관계
    - 식별관계
        - 엔터티의 기본키를 다른 엔터티가 기본키의 하나로 공유하는 관계
        - 식별관계는 ERD에서 실선으로 표시
    
    - 비식별관계
        - 강한 개체의 기본키를 다른 엔터티의 기본키가 아닌 일반 속성으로 관계
        - 비식별관계는 ERD에서 점선으로 표시


8. 정규화(Normalization)
  1) 개념
    - 중복 데이터를 허용하지 않는 방식으로 테이블을 설계하는 방식
    - 최소한의 데이터만을 하나의 엔터티에 넣는식으로 데이터를 분해하는 과정
    - 데이터의 일관성, 최소한의 데이터 중복, 최대한의 데이터 유연성을 위함
    - 데이터의 중복을 제거하고 데이터 모델의 독립성 확보
    - 이상현상을 줄이기 위한 데이터베이스 설계 기법
    - 논리 데이터 모델링 수행 시점에서 고려됨
  
  2) 이상현상
    - 정규화를 하지 않아 발생하는 현상(삽입,삭제,갱신)
    - 삽입이상 : 불필요한 값이 삽입
    - 삭제이상 : 다른 값이 같이 삭제됨
    - 갱신이상 : 다른 값이 업데이트가 안됨

  3) 정규화 단계 (도부이결다조)

    [1] 제 1 정규화(1NF)
        - 원자성, 한 속성이 하나의 값만 같도록 테이블 분해

    [2] 제 2 정규화(2NF)
        - 부분 함수 종속 제거
        - 완전 함수 종속을 만들도록 테이블 분해
          - 기본키를 구성하는 모든 컬럼의 값이 다른 컬럼을 결정짓는 상태
        - 1대1 대응을 갖지 않도록 만듦
        - PK가 2개 이상일 때 PK의 일부와 종속되는 관계가 있으면 분리

    [3] 제 3 정규화(3NF)
        - 이행적 종속 제거하도록 테이블 분해
          - A -> B -> C 일때 A->C 인 경우
        - (A,B) , (B,C)로 분리
          (A가 B의 결정자 == A -> B)

    [4] BCNF 정규화
        - 모든 결정자가 후보키가 되도록

    [5] 제 4 정규화
        - 다중값 종속성 제거

    [6] 제 5 정규화
        - 조인에 의해서 종속성이 발생되는 경우 분해

  4) 반정규화
    - 성능 향상을 위해 데이터 중복을 허용하고 조인을 줄이는 방법
    - 정규화된 데이터 모델을 중복, 통합, 분리하는 데이터 모델링 기법
    - 조회 속도 향상, 데이터 모델의 유연성 낮아짐
    - 비정규화는 정규화를 수행하지 않는 것을 의미

    - 수행하는 경우
        - 수행 속도가 느려지는 경우
        - 다량의 범위를 자주 처리해야 하는 경우
        - 특정 범위의 데이터만 자주 처리하는 경우
        - 요약/집계 정보가 자주 요구되는 경우


9. 관계
  1) 개념
    - 엔터티의 인스턴스 사이의 논리적인 연관성
    - 관계를 맺는다는 의미는 부모의 식별자를 자식에 상속하고
      상속된 속성을 매핑키(조인키)로 활용
  
  2) 분류
    - 존재 관계는 엔터티 간의 상태를 의미
        - ex) 사원 엔터티는 부서 엔터티에 소속
    - 행위 관계는 엔터티 간의 어떤 행위가 있는 것을 의미
        - ex) 주문을 고객에 주문할 때 발생

  3) 조인의 의미
    - 중복을 피하기 위해 정규화를 하면서 분리된 테이블이 서로 관계를 맺음
    - 두 테이블의 데이터를 동시에 출력하거나 관계가 있는 테이블을 참조하기 
      위해서는 데이터를 연결해야 하는데 이를 조인이라고 함

  4) 계층형 데이터 모델
    - 자기 자신끼리 관계가 발생
    - 셀프 조인이라고 함
  
  5) 상호배타적 관계
    - 두 테이블 중 하나만 가능한 관계
        - ex) 주문은 개인고객이나 법인고객 둘 중 하나만 가능


10. 트랜잭션
  1) 개념
    - 하나의 연속적인 업무 단위
    - 트랜잭션에 의한 관계는 필수적인 관계 형태를 가짐
    - 하나의 트랜잭션 안에는 여러개의 연산이 포함됨

  2) 특징
    - 트랜잭션 내의 연산은 모두 수행되거나 모두 수행되지 않아야 함

  3) 필수적 선택적 관계와 ERD
    - 두 엔터티의 관계가 서로 필수적일 때 하나의 트랜잭션 형성
    - 두 엔터티가 서로 독립적으로 수행이 가능하다면 선택적 관계로 표현

    - IE 표기법
        - 원을 사용하여 필수적 관계와 선택적 관계를 구분
        - 필수적 관계에는 원을 그리지 않음
        - 선택적 관계에는 관계선 끝에 원을 그림

    - 바커표기법
        - 실선과 점선으로 구분
        - 필수적 관계는 실선
        - 선택적 관계는 점선

11. Null
  1) 개념
    - DBMS에서 아직 정해지지 않은 값
    - 빈문자열이나 0과 다른 개념
    - 모델 설계 시 NULL을 허용할 지를 결정

  2) 특성
    - NULL을 포함한 연산 결과는 항상 NULL
    - NVL(속성이름, 치환하고자 하는 값) : NULL을 다른 수로 치환하는 함수 존재
    - 집계 함수는 NULL을 항상 무시한다.(sum, avg, min, max)
  
  3) NULL의 ERD 표기법
    - IE 표기법에서는 NULL 허용 여부를 알 수 없음
    - 바커 표기법에서는 속성 앞에 동그라미가 NULL 허용을 의미함
        - #은 주키

12. 식별자 구분(대체 여부에 따른)
  1) 본질식별자
    - 업무에 의해 만들어지는 식별자(꼭 필요한 식별자)
  
  2) 인조식별자
    - 인위적으로 만들어지는 식별자
    - 본질식별자가 복잡한 구성을 가질 때 인위적으로 생성
    - 각 행을 구분하기 위한 기본키로 사용되며 자동으로 증가하는 일련번호 형태
        - ex) 상품 코드 ACK-1111
    - 단점
        - 중복 데이터 발생 가능성 -> 데이터 품질 저하
        - 불필요한 인덱스 생성 -> 저장공간 낭비 및 DML 성능 저하
          - 인덱스는 조회 성능을 향상시키기 위한 객체, INSERT, UPDATE,
            DELETE 시 INDEX SPLIT 현상으로 인해 성능이 저하된다.

1과목 : 4/10 문제 이상    목표 = 7문제
2과목 : 16/40 문제 이상   목표 = 23문제

30문제만 맞추면 됨